'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');
var React = require('react');
var PropTypes = require('prop-types');
var index = require('../../node_modules/classnames/index.js');
var useForkedRef = require('../../hooks/useForkedRef.js');
require('@popperjs/core');
var Transition = require('../../node_modules/react-transition-group/esm/Transition.js');

var CTabPane = React.forwardRef(function (_a, ref) {
    var children = _a.children, className = _a.className, onHide = _a.onHide, onShow = _a.onShow, _b = _a.transition, transition = _b === void 0 ? true : _b, visible = _a.visible, rest = tslib_es6.__rest(_a, ["children", "className", "onHide", "onShow", "transition", "visible"]);
    var tabPaneRef = React.useRef();
    var forkedRef = useForkedRef.useForkedRef(ref, tabPaneRef);
    return (React.createElement(Transition.default, { in: visible, nodeRef: tabPaneRef, onEnter: onShow, onExit: onHide, timeout: 150 }, function (state) { return (React.createElement("div", tslib_es6.__assign({ className: index.default('tab-pane', {
            active: visible,
            fade: transition,
            show: state === 'entered',
        }, className) }, rest, { ref: forkedRef }), children)); }));
});
CTabPane.propTypes = {
    children: PropTypes.node,
    className: PropTypes.string,
    onHide: PropTypes.func,
    onShow: PropTypes.func,
    transition: PropTypes.bool,
    visible: PropTypes.bool,
};
CTabPane.displayName = 'CTabPane';

exports.CTabPane = CTabPane;
//# sourceMappingURL=CTabPane.js.map
