import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React, { createContext, forwardRef, useState } from 'react';
import PropTypes from 'prop-types';
import classNames from '../../node_modules/classnames/index.js';

var CAccordionContext = createContext({});
var CAccordion = forwardRef(function (_a, ref) {
    var children = _a.children, activeItemKey = _a.activeItemKey, _b = _a.alwaysOpen, alwaysOpen = _b === void 0 ? false : _b, className = _a.className, flush = _a.flush, rest = __rest(_a, ["children", "activeItemKey", "alwaysOpen", "className", "flush"]);
    var _c = useState(activeItemKey), _activeItemKey = _c[0], setActiveKey = _c[1];
    return (React.createElement("div", __assign({ className: classNames('accordion', { 'accordion-flush': flush }, className) }, rest, { ref: ref }),
        React.createElement(CAccordionContext.Provider, { value: { _activeItemKey: _activeItemKey, alwaysOpen: alwaysOpen, setActiveKey: setActiveKey } }, children)));
});
CAccordion.propTypes = {
    alwaysOpen: PropTypes.bool,
    activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    children: PropTypes.node,
    className: PropTypes.string,
    flush: PropTypes.bool,
};
CAccordion.displayName = 'CAccordion';

export { CAccordion, CAccordionContext };
//# sourceMappingURL=CAccordion.js.map
