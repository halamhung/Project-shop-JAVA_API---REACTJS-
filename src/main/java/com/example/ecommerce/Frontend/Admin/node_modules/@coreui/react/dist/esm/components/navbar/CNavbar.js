import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from '../../node_modules/classnames/index.js';
import { colorPropType } from '../../props.js';

var CNavbar = forwardRef(function (_a, ref) {
    var _b;
    var children = _a.children, _c = _a.as, Component = _c === void 0 ? 'nav' : _c, className = _a.className, color = _a.color, colorScheme = _a.colorScheme, container = _a.container, expand = _a.expand, placement = _a.placement, rest = __rest(_a, ["children", "as", "className", "color", "colorScheme", "container", "expand", "placement"]);
    return (React.createElement(Component, __assign({ className: classNames('navbar', (_b = {},
            _b["bg-".concat(color)] = color,
            _b[typeof expand === 'boolean' ? 'navbar-expand' : "navbar-expand-".concat(expand)] = expand,
            _b), placement, className) }, (colorScheme && { 'data-coreui-theme': colorScheme }), rest, { ref: ref }), container ? (React.createElement("div", { className: typeof container === 'string' ? "container-".concat(container) : 'container' }, children)) : (React.createElement(React.Fragment, null, children))));
});
CNavbar.propTypes = {
    as: PropTypes.elementType,
    children: PropTypes.node,
    className: PropTypes.string,
    color: colorPropType,
    colorScheme: PropTypes.oneOf(['dark', 'light']),
    container: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf([
            'sm',
            'md',
            'lg',
            'xl',
            'xxl',
            'fluid',
        ]),
    ]),
    expand: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),
    ]),
    placement: PropTypes.oneOf(['fixed-top', 'fixed-bottom', 'sticky-top']),
};
CNavbar.displayName = 'CNavbar';

export { CNavbar };
//# sourceMappingURL=CNavbar.js.map
