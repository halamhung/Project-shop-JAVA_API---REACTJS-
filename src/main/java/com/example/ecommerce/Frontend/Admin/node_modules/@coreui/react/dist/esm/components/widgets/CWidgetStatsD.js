import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from '../../node_modules/classnames/index.js';
import { CCard } from '../card/CCard.js';
import { CCardBody } from '../card/CCardBody.js';
import '../card/CCardFooter.js';
import '../card/CCardGroup.js';
import { CCardHeader } from '../card/CCardHeader.js';
import '../card/CCardImage.js';
import '../card/CCardImageOverlay.js';
import '../card/CCardLink.js';
import '../card/CCardSubtitle.js';
import '../card/CCardText.js';
import '../card/CCardTitle.js';
import { CCol } from '../grid/CCol.js';
import { colorPropType } from '../../props.js';

var CWidgetStatsD = forwardRef(function (_a, ref) {
    var _b;
    var className = _a.className, chart = _a.chart, color = _a.color, icon = _a.icon, values = _a.values, rest = __rest(_a, ["className", "chart", "color", "icon", "values"]);
    return (React.createElement(CCard, __assign({ className: className }, rest, { ref: ref }),
        React.createElement(CCardHeader, { className: classNames('position-relative d-flex justify-content-center align-items-center', (_b = {},
                _b["bg-".concat(color)] = color,
                _b)) },
            icon,
            chart),
        React.createElement(CCardBody, { className: "row text-center" }, values &&
            values.map(function (value, index) {
                return (React.createElement(React.Fragment, { key: index },
                    index % 2 !== 0 && React.createElement("div", { className: "vr" }),
                    React.createElement(CCol, null,
                        React.createElement("div", { className: "fs-5 fw-semibold" }, value.value),
                        React.createElement("div", { className: "text-uppercase text-body-secondary small" }, value.title))));
            }))));
});
CWidgetStatsD.propTypes = {
    chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    className: PropTypes.string,
    color: colorPropType,
    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    values: PropTypes.arrayOf(PropTypes.any),
};
CWidgetStatsD.displayName = 'CWidgetStatsD';

export { CWidgetStatsD };
//# sourceMappingURL=CWidgetStatsD.js.map
