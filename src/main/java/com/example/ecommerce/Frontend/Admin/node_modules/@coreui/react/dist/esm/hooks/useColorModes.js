import { useState, useEffect } from 'react';

var getStoredTheme = function (localStorageItemName) {
    return typeof window !== 'undefined' && localStorage.getItem(localStorageItemName);
};
var setStoredTheme = function (localStorageItemName, colorMode) {
    return localStorage.setItem(localStorageItemName, colorMode);
};
var getPreferredColorScheme = function (localStorageItemName) {
    if (typeof window === 'undefined') {
        return 'light';
    }
    var storedTheme = getStoredTheme(localStorageItemName);
    if (storedTheme) {
        return storedTheme;
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
};
var setTheme = function (colorMode) {
    document.documentElement.dataset.coreuiTheme =
        colorMode === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : colorMode;
    var event = new Event('ColorSchemeChange');
    document.documentElement.dispatchEvent(event);
};
var useColorModes = function (localStorageItemName) {
    if (localStorageItemName === void 0) { localStorageItemName = 'coreui-react-color-scheme'; }
    var _a = useState(getPreferredColorScheme(localStorageItemName)), colorMode = _a[0], setColorMode = _a[1];
    useEffect(function () {
        if (colorMode) {
            setStoredTheme(localStorageItemName, colorMode);
            setTheme(colorMode);
        }
    }, [colorMode]);
    useEffect(function () {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function () {
            var storedTheme = getStoredTheme(localStorageItemName);
            if (storedTheme !== 'light' && storedTheme !== 'dark' && colorMode) {
                setTheme(colorMode);
            }
        });
    });
    return {
        colorMode: colorMode,
        isColorModeSet: function () { return Boolean(getStoredTheme(localStorageItemName)); },
        setColorMode: setColorMode,
    };
};

export { useColorModes };
//# sourceMappingURL=useColorModes.js.map
